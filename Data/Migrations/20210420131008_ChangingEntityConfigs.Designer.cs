// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210420131008_ChangingEntityConfigs")]
    partial class ChangingEntityConfigs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.3.21201.2")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarEntityDetailEntity", b =>
                {
                    b.Property<Guid>("CarsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CarsId", "DetailsId");

                    b.HasIndex("DetailsId");

                    b.ToTable("CarDetails");
                });

            modelBuilder.Entity("Entities.AccumulatorEntity", b =>
                {
                    b.Property<Guid>("DetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.HasKey("DetailId");

                    b.ToTable("Accumulators");
                });

            modelBuilder.Entity("Entities.CarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CoeffMoneyPerKilometer")
                        .HasColumnType("float");

                    b.Property<double>("Mileage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Entities.DetailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanBeRepaired")
                        .HasColumnType("bit");

                    b.Property<double>("CoeffDecrStability")
                        .HasColumnType("float");

                    b.Property<bool>("IsBroken")
                        .HasColumnType("bit");

                    b.Property<double>("PurchaseCost")
                        .HasColumnType("float");

                    b.Property<double>("RepairCost")
                        .HasColumnType("float");

                    b.Property<double>("Stability")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Details");
                });

            modelBuilder.Entity("Entities.DiskEntity", b =>
                {
                    b.Property<Guid>("DetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Diameter")
                        .HasColumnType("int");

                    b.HasKey("DetailId");

                    b.ToTable("Disks");
                });

            modelBuilder.Entity("Entities.EngineEntity", b =>
                {
                    b.Property<Guid>("DetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DetailId");

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("CarEntityDetailEntity", b =>
                {
                    b.HasOne("Entities.CarEntity", null)
                        .WithMany()
                        .HasForeignKey("CarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DetailEntity", null)
                        .WithMany()
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.AccumulatorEntity", b =>
                {
                    b.HasOne("Entities.DetailEntity", "Detail")
                        .WithOne("Accumulator")
                        .HasForeignKey("Entities.AccumulatorEntity", "DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("Entities.DiskEntity", b =>
                {
                    b.HasOne("Entities.DetailEntity", "Detail")
                        .WithOne("Disk")
                        .HasForeignKey("Entities.DiskEntity", "DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("Entities.EngineEntity", b =>
                {
                    b.HasOne("Entities.DetailEntity", "Detail")
                        .WithOne("Engine")
                        .HasForeignKey("Entities.EngineEntity", "DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("Entities.DetailEntity", b =>
                {
                    b.Navigation("Accumulator");

                    b.Navigation("Disk");

                    b.Navigation("Engine");
                });
#pragma warning restore 612, 618
        }
    }
}
